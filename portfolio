# C# Course Projects and Exercises

 

Welcome to my C# course repository! This repository contains all the assignments, projects, and exercises I completed as part of my C# programming course. Below, you'll find a list of the major projects along with a description of each.

 

## Table of Contents

 

- [Introduction](#introduction)

- [Skills Learned](#skills-learned)

- [Projects Completed](#projects-completed)

  - [Project 1: Employee Class with Operator Overloading](#project-1-employee-class-with-operator-overloading)

  - [Project 2: Polymorphism with Interfaces](#project-2-polymorphism-with-interfaces)

  - [Project 3: Code-First Entity Framework](#project-3-code-first-entity-framework)

- [Setup Instructions](#setup-instructions)

- [Contributing](#contributing)

- [License](#license)

 

## Introduction

 

In this repository, I showcase the C# projects I've developed during my course. These projects focus on the foundational aspects of object-oriented programming (OOP) and using various C# features to build applications.

 

## Skills Learned

 

Throughout this course, I gained proficiency in the following areas:

 

- **Object-Oriented Programming (OOP)**: Classes, objects, inheritance, polymorphism, and abstraction.

- **Operator Overloading**: Overloading operators like `==` and `!=` to compare objects.

- **Interfaces and Polymorphism**: Using interfaces to define common methods and leveraging polymorphism for flexible code.

- **Entity Framework (Code-First)**: Using Entity Framework for creating and managing databases with the Code-First approach.

- **LINQ (Language Integrated Query)**: Querying collections and databases with LINQ.

 

## Projects Completed

 

### Project 1: Employee Class with Operator Overloading

 

In this project, I created an `Employee` class and implemented operator overloading for the `==` and `!=` operators. The comparison was done based on the `Id` property of the `Employee` class. The project demonstrated how to use these operators to compare objects in a meaningful way.

 

**Technologies Used**: C#, Visual Studio

 

### Project 2: Polymorphism with Interfaces

 

This project involved creating an `IQuittable` interface with a `Quit()` method, which was implemented by the `Employee` class. Polymorphism was demonstrated by using an interface reference to call the `Quit()` method. This showcased how interfaces can be used for polymorphic behavior in C#.

 

**Technologies Used**: C#, Visual Studio

 

### Project 3: Code-First Entity Framework

 

In this project, I built a simple Entity Framework application using the Code-First approach. I created a `Student` database, defined a `Student` class with properties, and used Entity Framework to create the database schema and add a student record to the database.

 

**Technologies Used**: C#, Entity Framework, SQL Server

 

## Setup Instructions

 

To set up the projects locally, follow these steps:

 

1. Clone this repository to your local machine:

   ```bash

   git clone https://github.com/YourUsername/CSharp-Course-Projects.git

 

2. Open the solution file (.sln) in Visual Studio or your preferred C# IDE.

 

 

3. Build the project and run the Program.cs file to see the output.

 

 

4. For the Entity Framework project, ensure you have SQL Server or any compatible database set up for the Code-First approach.

 

 

 

Contributing

 

If you'd like to contribute to this project, feel free to fork the repository, make changes, and submit a pull request. Please ensure that any contributions follow the coding standards and best practices.

 

License

 

This repository is licensed under the MIT License - see the LICENSE file for details.

 

### Explanation:

 

- **Introduction**: Provides an overview of the repository and its purpose.

- **Skills Learned**: A bullet list of the main skills you learned during the course, such as OOP, operator overloading, and using interfaces and Entity Framework.

- **Projects Completed**: A list of the projects you completed with brief descriptions and technologies used. This could be expanded as you complete more projects.

- **Setup Instructions**: Step-by-step guide for setting up the projects on your local machine.

- **Contributing**: Encourages others to contribute to your repository if applicable.

- **License**: A section to specify the license under which the project is shared (MIT License is a common open-source license).
